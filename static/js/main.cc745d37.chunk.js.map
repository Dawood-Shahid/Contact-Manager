{"version":3,"sources":["Components/Layout/Logo/Logo.js","Context/Auth/authContext.js","Context/Contact/contactContext.js","Components/Layout/Navigation/Navigation.js","Components/Layout/Navbar.js","Components/UI/Button/Button.js","Components/Contacts/ContactItem/ContactItem.js","Components/UI/Spinner/Spinner.js","Components/Contacts/Contact.js","Context/Alert/alertContext.js","Components/UI/InputElement/InputElement.js","Components/Contacts/ContactForm/ContactForm.js","Components/UI/SearchBar/SearchBar.js","Components/Pages/Home/Home.js","Components/Pages/About.js","Components/Pages/Register/Register.js","Components/Pages/Login/Login.js","Components/UI/Backdrop/Backdrop.js","Components/UI/Modal/Modal.js","Components/Layout/Alert/Alerts.js","Context/Contact/contactReducer.js","Context/Types.js","Config/DB.js","Context/Contact/ContactState.js","Context/Auth/authReducer.js","Context/Auth/AuthState.js","Context/Alert/alertReducer.js","Context/Alert/AlertState.js","Components/Routeing/PrivateRoute.js","App.js","index.js"],"names":["logo","className","authContext","createContext","contactContext","Navigation","useContext","AuthContext","ContactContext","logout","useLocation","isAuthenticated","user","clearContacts","useEffect","links","name","onClick","to","navbar","Button","props","clicked","btnType","join","children","ContactItem","contact","deleteContact","setCurrent","clearCurrent","id","email","phone","type","style","color","charAt","toUpperCase","slice","Spinner","class","Contacts","contacts","filtered","loading","length","textAlign","marginTop","map","key","alertContext","Input","inputElement","elementType","label","autoComplete","elementConfig","value","onChange","changed","checked","ContactForm","AlertContext","addContact","updateContact","current","setAlert","clearErrors","useState","placeholder","firstRadio","selected","secondRadio","setContact","data","getState","getProperty","inputArray","push","config","details","e","keyName","otherRadio","getState1","getProperty1","target","getState2","getProperty2","updatedInput","updatedField","preventDefault","SearchBar","search","input","setInput","filterContacts","clearFilter","updatedinput","Home","loadUser","userID","getContacts","Contact","About","backgroundColor","padding","borderRadius","Registration","register","error","history","password","password2","setUser","Login","login","Backdrop","show","Modal","state","alertClass","Alerts","alerts","alert","msg","action","payload","filter","regex","RegExp","match","DB","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","ContactState","useReducer","ContactReducer","dispatch","Provider","Math","floor","random","Axios","post","then","res","get","contactArr","objGetContact","index","put","objPostContact","JSON","parse","catch","err","delete","text","console","log","mesage","localStorage","setItem","removeItem","AuthState","initialState","getItem","AuthReducer","ID","users","message","FormData","auth","createUserWithEmailAndPassword","uid","setTimeout","signInWithEmailAndPassword","AlertState","AlertReducer","timeout","PrivateRoute","Component","component","rest","render","from","App","currentURL","pathname","path","active","exact","Register","myApp","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cc745d37.chunk.js","sourcesContent":["import React, { Fragment } from 'react'\r\nimport './Logo.css'\r\n\r\nconst logo = () => {\r\n    return (\r\n        <Fragment>\r\n            <h1><i className=\"fas fa-book-reader Logo\" /><span className='LogoSpan'>Contact </span>Managet</h1>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default logo\r\n","import { createContext } from 'react';\r\n\r\nconst authContext = createContext();\r\n\r\nexport default authContext;","import { createContext } from 'react';\r\n\r\nconst contactContext = createContext();\r\n\r\nexport default contactContext;","import React, { useContext, useEffect, useState, Fragment } from 'react';\r\nimport { NavLink, useLocation } from 'react-router-dom';\r\nimport AuthContext from '../../../Context/Auth/authContext';\r\nimport ContactContext from '../../../Context/Contact/contactContext';\r\nimport './Navigation.css';\r\n\r\nconst Navigation = () => {\r\n    const authContext = useContext(AuthContext);\r\n    const contactContext = useContext(ContactContext);\r\n    const currentURL = useLocation();\r\n\r\n    const { logout, isAuthenticated, user } = authContext;\r\n    const { clearContacts } = contactContext;\r\n\r\n    useEffect(() => {\r\n\r\n    }, [isAuthenticated, user]);\r\n\r\n    const onLogout = () => {\r\n        logout();\r\n        clearContacts();\r\n    };\r\n\r\n    let links = null;\r\n\r\n    if (isAuthenticated) {\r\n        links = (\r\n            <ul className='NavList'>\r\n                <li>\r\n                    Hello <span className='UserSpan'>{user && user.name}</span>\r\n                </li>\r\n                <li className='HoverEffact'>\r\n                    <a className='Links' onClick={onLogout} >\r\n                        <i className=\"fas fa-sign-out-alt ExitLogo\"></i>\r\n                        Log out\r\n                    </a>\r\n                </li>\r\n            </ul>\r\n        );\r\n    }\r\n    else {\r\n        links = (\r\n            <ul className='NavList'>\r\n                <li className='HoverEffact'>\r\n                    <NavLink className='Links' to='/Contact-Manager/login' >Login</NavLink>\r\n                </li>\r\n                <li className='HoverEffact'>\r\n                    <NavLink className='Links' to='/Contact-Manager/about' >About</NavLink>\r\n                </li>\r\n            </ul>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            {links}\r\n            {/* <ul className='NavList'>\r\n                {authenticatedUser.isAuthenticated ?\r\n                    <Fragment>\r\n                        <li>\r\n                            Hello {authenticatedUser.user && authenticatedUser.user.name}\r\n                        </li>\r\n                        <li>\r\n                            <NavLink className='Links' to='/login' >Log out</NavLink>\r\n                        </li>\r\n                    </Fragment> :\r\n                    <Fragment>\r\n                        <li>\r\n                            <NavLink className='Links' to='/login' >Login</NavLink>\r\n                        </li>\r\n                        <li>\r\n                            <NavLink className='Links' to='/about' >About</NavLink>\r\n                        </li>\r\n                    </Fragment>\r\n                }\r\n            </ul> */}\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default Navigation;\r\n","import React from 'react'\r\nimport Logo from './Logo/Logo'\r\nimport Navigation from './Navigation/Navigation'\r\nimport './Navbar.css'\r\n\r\nconst navbar = () => {\r\n    return (\r\n        <div className='Hader'>\r\n            <Logo />\r\n            <Navigation />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default navbar\r\n","import React from 'react';\r\n\r\nimport './Button.css';\r\n\r\nconst Button = (props) => (\r\n    <button onClick={props.clicked} className={['Button', props.btnType].join(' ')}>\r\n        {props.children}\r\n    </button>\r\n)\r\n\r\nexport default Button;","import React, { useContext } from 'react';\r\nimport Button from '../../UI/Button/Button';\r\nimport ContactContext from '../../../Context/Contact/contactContext';\r\nimport './ContactItem.css';\r\n\r\nconst ContactItem = ({ contact }) => {\r\n    const contactContext = useContext(ContactContext);\r\n    const { deleteContact, setCurrent, clearCurrent } = contactContext;\r\n\r\n    const { id, name, email, phone, type } = contact;\r\n\r\n    const onDelete = () => {\r\n        deleteContact(id);\r\n        clearCurrent();\r\n    };\r\n\r\n    const onEdit = () => {\r\n        setCurrent(contact);\r\n    };\r\n    // console.log('contact item ->', type)\r\n\r\n    return (\r\n        <div className='Item'>\r\n            <h3 style={{ color: 'blue' }}>\r\n                {name}\r\n                <span className={'TypeSpan ' + (type === 'professional' ? 'Professional' : 'Prosonal')} >\r\n                    {type.charAt(0).toUpperCase() + type.slice(1)}\r\n                </span>\r\n            </h3>\r\n            <ul className='ItemList'>\r\n                {email && (<li>\r\n                    <i className=\"fas fa-envelope-open-text Icon\" />{email}\r\n                </li>)}\r\n                {phone && (<li>\r\n                    <i className=\"fas fa-phone-square-alt Icon\" />{phone}\r\n                </li>)}\r\n            </ul>\r\n            <Button btnType='Success Small' clicked={onEdit} >Edit</Button>\r\n            <Button btnType='Danger Small' clicked={onDelete} >Delete</Button>\r\n            {/* <Button btnType='Large' >Test</Button> */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ContactItem;","import React from 'react';\r\nimport './Spinner.css'\r\n\r\nconst Spinner = () => {\r\n    return (\r\n        <div class=\"Loader\">Loading...</div>\r\n    )\r\n}\r\n\r\nexport default Spinner\r\n","import React, { Fragment, useContext } from 'react';\r\nimport ContactContext from '../../Context/Contact/contactContext';\r\nimport ContactItem from './ContactItem/ContactItem';\r\nimport Spinner from '../UI/Spinner/Spinner';\r\n\r\nconst Contacts = () => {\r\n    const contactContext = useContext(ContactContext);\r\n    const { contacts, filtered, loading } = contactContext;\r\n\r\n    let contact;\r\n\r\n    if (loading) {\r\n        contact = (\r\n            <Spinner />\r\n        );\r\n    }\r\n    else {\r\n        contact = (\r\n            contacts === null || contacts.length == 0 ?\r\n                <h3 style={{ textAlign: 'center', marginTop: '15px' }}>Please add a contact...</h3> :\r\n                filtered !== null ?\r\n                    (\r\n                        filtered.map(\r\n                            contact => <ContactItem key={contact.id} contact={contact} />\r\n                        )\r\n                    ) :\r\n                    (\r\n                        contacts.map(\r\n                            contact => <ContactItem key={contact.id} contact={contact} />\r\n                        )\r\n                    )\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            {contact}\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default Contacts;\r\n","import { createContext } from 'react';\r\n\r\nconst alertContext = createContext();\r\n\r\nexport default alertContext;","import React, { Fragment } from 'react';\r\nimport './InputElement.css';\r\n\r\nconst Input = (props) => {\r\n    let inputElement = null;\r\n\r\n    switch (props.elementType) {\r\n        case ('input'):\r\n            inputElement = <Fragment>\r\n                <label className='Label' > {props.label} </label>\r\n                <input\r\n                    name={props.name}\r\n                    className='InputField'\r\n                    autoComplete='off'\r\n                    {...props.elementConfig}\r\n                    value={props.value}\r\n                    onChange={props.changed}\r\n                />\r\n            </Fragment>;\r\n            break;\r\n        case ('email'):\r\n            inputElement = <Fragment>\r\n                <label className='Label' > {props.label} </label>\r\n                <input\r\n                    name={props.name}\r\n                    className='InputField'\r\n                    autoComplete='off'\r\n                    {...props.elementConfig}\r\n                    value={props.value}\r\n                    onChange={props.changed}\r\n                />\r\n            </Fragment>;\r\n            break;\r\n        case ('password'):\r\n            inputElement = <Fragment>\r\n                <label className='Label' > {props.label} </label>\r\n                <input\r\n                    name={props.name}\r\n                    className='InputField'\r\n                    autoComplete='off'\r\n                    {...props.elementConfig}\r\n                    value={props.value}\r\n                    onChange={props.changed}\r\n                />\r\n            </Fragment>;\r\n            break;\r\n        // case ('textarea'):\r\n        //     inputElement = <textarea\r\n        //         className='InputField'\r\n        //         {...props.elementConfig}\r\n        //         value={props.value}\r\n        //         onChange={props.changed}\r\n        //     />;\r\n        //     break;\r\n        // case ('select'):\r\n        //     inputElement = <select\r\n        //         className='InputField'\r\n        //         // value={props.value}\r\n        //         onChange={props.changed}\r\n        //     >\r\n        //         {props.elementConfig.options.map(option => (\r\n        //             <option key={option.value} value={option.value}>\r\n        //                 {option.displayValue}\r\n        //             </option>\r\n        //         ))}\r\n        //     </select>;\r\n        //     break;\r\n        case ('radio'):\r\n            inputElement = <Fragment>\r\n                <label className='RadioLabel'>\r\n                    <input\r\n                        name={props.name}\r\n                        autoComplete='off'\r\n                        {...props.elementConfig}\r\n                        value={props.value}\r\n                        onChange={props.changed}\r\n                        checked={props.checked}\r\n                    />\r\n                    {' ' + props.label}\r\n                </label>\r\n            </Fragment>;\r\n            break;\r\n        default:\r\n            inputElement = <Fragment>\r\n                <label className='Label' > {props.label} </label>\r\n                <input\r\n                    className='InputField'\r\n                    autoComplete='off'\r\n                    {...props.elementConfig}\r\n                    value={props.value}\r\n                    onChange={props.changed}\r\n                />\r\n            </Fragment>;\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            {inputElement}\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default Input;","import React, { useState, useContext, useEffect } from 'react';\r\nimport Button from '../../UI/Button/Button';\r\nimport ContactContext from '../../../Context/Contact/contactContext';\r\nimport AlertContext from '../../../Context/Alert/alertContext';\r\nimport Input from '../../UI/InputElement/InputElement';\r\nimport './ContactForm.css';\r\n\r\nconst ContactForm = () => {\r\n    const contactContext = useContext(ContactContext);\r\n    const alertContext = useContext(AlertContext);\r\n    \r\n    const { addContact, updateContact, clearCurrent, current } = contactContext;\r\n    const { setAlert, clearErrors } = alertContext;\r\n\r\n    const initialState = {\r\n        name: {\r\n            elementType: 'input',\r\n            elementConfig: {\r\n                type: 'text',\r\n                placeholder: 'Name',\r\n            },\r\n            value: '',\r\n            label: ''\r\n        },\r\n        email: {\r\n            elementType: 'email',\r\n            elementConfig: {\r\n                type: 'email',\r\n                placeholder: 'Email',\r\n            },\r\n            value: '',\r\n            label: ''\r\n        },\r\n        phone: {\r\n            elementType: 'text',\r\n            elementConfig: {\r\n                type: 'text',\r\n                placeholder: 'Phone',\r\n            },\r\n            value: '',\r\n            label: ''\r\n        },\r\n        firstRadio: {\r\n            elementType: 'radio',\r\n            elementConfig: {\r\n                type: 'radio',\r\n            },\r\n            label: 'Personal',\r\n            value: 'personal',\r\n            selected: 'personal'\r\n        },\r\n        secondRadio: {\r\n            elementType: 'radio',\r\n            elementConfig: {\r\n                type: 'radio',\r\n            },\r\n            label: 'Professional',\r\n            value: 'professional',\r\n            selected: ''\r\n        }\r\n    };\r\n\r\n    const [contact, setContact] = useState(initialState);\r\n\r\n    useEffect(() => {\r\n        if (current !== null) {\r\n            const data = {};\r\n            for (const key in contact) {\r\n                const getState = { ...contact };\r\n                const getProperty = { ...getState[key] };\r\n                if (key === 'firstRadio' || key === 'secondRadio') {\r\n                    if (getProperty.value === current.type) {\r\n                        getProperty.selected = current.type;\r\n                        getState[key] = getProperty;\r\n                    }\r\n                    else {\r\n                        getProperty.selected = '';\r\n                        getState[key] = getProperty;\r\n                    }\r\n                    data[key] = getState[key];\r\n                }\r\n                else {\r\n                    getProperty.value = current[key];\r\n                    getState[key] = getProperty;\r\n                    data[key] = getState[key];\r\n                };\r\n            }\r\n            setContact({\r\n                ...contact,\r\n                name: data.name,\r\n                email: data.email,\r\n                phone: data.phone,\r\n                firstRadio: data.firstRadio,\r\n                secondRadio: data.secondRadio\r\n            });\r\n        }\r\n        else {\r\n            setContact({\r\n                name: {\r\n                    elementType: 'input',\r\n                    elementConfig: {\r\n                        type: 'text',\r\n                        placeholder: 'Name',\r\n                    },\r\n                    value: '',\r\n                    label: ''\r\n                },\r\n                email: {\r\n                    elementType: 'email',\r\n                    elementConfig: {\r\n                        type: 'email',\r\n                        placeholder: 'Email',\r\n                    },\r\n                    value: '',\r\n                    label: ''\r\n                },\r\n                phone: {\r\n                    elementType: 'text',\r\n                    elementConfig: {\r\n                        type: 'text',\r\n                        placeholder: 'Phone',\r\n                    },\r\n                    value: '',\r\n                    label: ''\r\n                },\r\n                firstRadio: {\r\n                    elementType: 'radio',\r\n                    elementConfig: {\r\n                        type: 'radio',\r\n                    },\r\n                    label: 'Personal',\r\n                    value: 'personal',\r\n                    selected: 'personal'\r\n                },\r\n                secondRadio: {\r\n                    elementType: 'radio',\r\n                    elementConfig: {\r\n                        type: 'radio',\r\n                    },\r\n                    label: 'Professional',\r\n                    value: 'professional',\r\n                    selected: ''\r\n                }\r\n            });\r\n        }\r\n    }, [current, contactContext]);\r\n\r\n    const onChange = (e, keyName) => {\r\n        if (keyName === 'firstRadio' || keyName === 'secondRadio') {\r\n            let otherRadio = null;\r\n            if (keyName === 'firstRadio') {\r\n                otherRadio = 'secondRadio';\r\n            }\r\n            else {\r\n                otherRadio = 'firstRadio';\r\n            }\r\n\r\n            // set selected value\r\n            const getState1 = { ...contact };\r\n            const getProperty1 = { ...getState1[keyName] };\r\n            getProperty1.selected = e.target.value;\r\n            getState1[keyName] = getProperty1;\r\n\r\n            // removing selected value\r\n            const getState2 = { ...contact };\r\n            const getProperty2 = { ...getState2[otherRadio] };\r\n            getProperty2.selected = '';\r\n            getState2[otherRadio] = getProperty2;\r\n\r\n            setContact({ ...contact, [keyName]: getState1[keyName], [otherRadio]: getState2[otherRadio] });\r\n        }\r\n        else {\r\n            const updatedInput = { ...contact };\r\n            const updatedField = { ...updatedInput[keyName] };\r\n            updatedField.value = e.target.value;\r\n            updatedInput[keyName] = updatedField;\r\n\r\n            setContact({ ...contact, [keyName]: updatedInput[keyName] });\r\n        }\r\n    };\r\n\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        if (contact.name.value === '' || contact.email.value === '' || contact.phone.value === '') {\r\n            setAlert('Enter all fields', 'danger');\r\n            clearErrors();\r\n            // console.log(`Enter all fields`)\r\n        }\r\n        else {\r\n            // console.log(`All fields are entered`)\r\n            const data = {};\r\n            for (let key in contact) {\r\n                if (key === 'name' | key === 'email' | key === 'phone') {\r\n                    // console.log(`${key} > ${contact[key].value}`)\r\n                    data[key] = contact[key].value;\r\n                }\r\n                else if (contact[key].selected !== '') {\r\n                    // console.log(`type > ${contact[key].selected}`)\r\n                    data['type'] = contact[key].selected;\r\n                }\r\n            }\r\n            if (current === null) {\r\n                // console.log(data.type)\r\n                addContact(data);\r\n            }\r\n            else {\r\n                data['id'] = current.id;\r\n                updateContact(data);\r\n            }\r\n            setContact({\r\n                name: {\r\n                    elementType: 'input',\r\n                    elementConfig: {\r\n                        type: 'text',\r\n                        placeholder: 'Name',\r\n                    },\r\n                    value: '',\r\n                    label: ''\r\n                },\r\n                email: {\r\n                    elementType: 'email',\r\n                    elementConfig: {\r\n                        type: 'email',\r\n                        placeholder: 'Email',\r\n                    },\r\n                    value: '',\r\n                    label: ''\r\n                },\r\n                phone: {\r\n                    elementType: 'text',\r\n                    elementConfig: {\r\n                        type: 'text',\r\n                        placeholder: 'Phone',\r\n                    },\r\n                    value: '',\r\n                    label: ''\r\n                },\r\n                firstRadio: {\r\n                    elementType: 'radio',\r\n                    elementConfig: {\r\n                        type: 'radio',\r\n                    },\r\n                    label: 'Personal',\r\n                    value: 'personal',\r\n                    selected: 'personal'\r\n                },\r\n                secondRadio: {\r\n                    elementType: 'radio',\r\n                    elementConfig: {\r\n                        type: 'radio',\r\n                    },\r\n                    label: 'Professional',\r\n                    value: 'professional',\r\n                    selected: ''\r\n                }\r\n            });\r\n            clearCurrent();\r\n        }\r\n    };\r\n\r\n    const onClear = () => {\r\n        clearCurrent();\r\n    };\r\n\r\n    const inputArray = [];\r\n    for (let key in contact) {\r\n        inputArray.push({\r\n            id: key,\r\n            config: contact[key]\r\n        });\r\n    }\r\n\r\n    return (\r\n        <form className='ContentForm'>\r\n            <h2>{current ? 'Update ' :\r\n                'Add '} <span className='ContactSpan'>Contact</span></h2>\r\n            {inputArray.map(details => (\r\n                <Input\r\n                    key={details.id}\r\n                    name={details.config.elementType}\r\n                    elementType={details.config.elementType}\r\n                    elementConfig={details.config.elementConfig}\r\n                    changed={(e) => onChange(e, details.id)}\r\n                    value={details.config.value}\r\n                    label={details.config.label}\r\n                    checked={details.config.value === details.config.selected}\r\n                />\r\n            ))}\r\n            <Button btnType='Large Primary' clicked={onSubmit}>{current ? 'Update' : 'Add'}</Button>\r\n            {current &&\r\n                <Button btnType='Large' clicked={onClear}>Clear</Button>\r\n            }\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default ContactForm;\r\n","import React, { useState, useContext } from 'react';\r\nimport ContactContext from '../../../Context/Contact/contactContext';\r\nimport Input from '../InputElement/InputElement';\r\nimport './SearchBar.css';\r\n\r\nconst SearchBar = () => {\r\n    const contactContext = useContext(ContactContext);\r\n    const [input, setInput] = useState({\r\n        search: {\r\n            elementType: 'input',\r\n            elementConfig: {\r\n                type: 'text',\r\n                placeholder: 'Filter Contacts......',\r\n            },\r\n            value: ''\r\n        }\r\n    });\r\n\r\n    const { filterContacts, clearFilter } = contactContext;\r\n\r\n    const onChange = e => {\r\n        if (e.target.value !== null) {\r\n            const updatedinput = { ...input };\r\n            const updatedField = { ...updatedinput.search };\r\n            updatedField.value = e.target.value;\r\n            // updatedinput.search = updatedField;\r\n\r\n            setInput({ ...input, search: updatedField });\r\n            filterContacts(e.target.value);\r\n        }\r\n        else {\r\n            clearFilter();\r\n        }\r\n    };\r\n\r\n    const inputArray = [];\r\n    for (let key in input) {\r\n        inputArray.push({\r\n            id: key,\r\n            config: input[key]\r\n        });\r\n    }\r\n\r\n    // console.log(inputArray);\r\n    // console.log(inputArray.config)\r\n\r\n    return (\r\n        <form className='SearchForm'>\r\n            {inputArray.map(details => (\r\n                <Input\r\n                    key={details.id}\r\n                    name={details.id}\r\n                    elementType={details.config.elementType}\r\n                    elementConfig={details.config.elementConfig}\r\n                    value={details.config.value}\r\n                    changed={onChange}\r\n                />\r\n            ))}\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default SearchBar;\r\n","import React, { useContext, useEffect } from 'react';\r\nimport Contact from '../../Contacts/Contact';\r\nimport ContactForm from '../../Contacts/ContactForm/ContactForm';\r\nimport SearchBar from '../../UI/SearchBar/SearchBar';\r\nimport AuthContext from '../../../Context/Auth/authContext';\r\nimport ContactContext from '../../../Context/Contact/contactContext';\r\nimport './Home.css';\r\n\r\nconst Home = () => {\r\n    const authContext = useContext(AuthContext);\r\n    const contactContext = useContext(ContactContext);\r\n\r\n    const { loadUser, userID } = authContext;\r\n    const { getContacts } = contactContext;\r\n\r\n    useEffect(() => {\r\n        loadUser(userID);\r\n        getContacts();\r\n        // eslint-disable-next-line\r\n    }, []);\r\n\r\n    return (\r\n        <div className='Container'>\r\n            <div className='FormContainer'>\r\n                <ContactForm />\r\n            </div>\r\n            <div>\r\n                <SearchBar />\r\n                <div className='ContactContainer'>\r\n                    <Contact />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;\r\n","import React from 'react'\r\n\r\nconst About = () => {\r\n    return (\r\n        <div>\r\n           <h1>About This App</h1>\r\n           <p>This app is built on the concepts of React, along with the firebase as a backend.</p>\r\n           <p style={{color:'blue', backgroundColor:'#dadada', padding:'0 5px', borderRadius:'5px'}}>Version: 1.0</p>\r\n        </div>\r\n    )\r\n}\r\n// #797979\r\nexport default About\r\n","import React, { useState, useContext, useEffect } from 'react';\r\nimport Input from '../../UI/InputElement/InputElement';\r\nimport Button from '../../UI/Button/Button';\r\nimport AlertContext from '../../../Context/Alert/alertContext';\r\nimport AuthContext from '../../../Context/Auth/authContext';\r\nimport './Register.css';\r\n\r\nconst Registration = (props) => {\r\n    const alertContext = useContext(AlertContext);\r\n    const authContext = useContext(AuthContext);\r\n\r\n    const { setAlert } = alertContext;\r\n    const { register, error, clearErrors, isAuthenticated } = authContext;\r\n\r\n    useEffect(() => {\r\n        if (isAuthenticated) {\r\n            props.history.push('/');\r\n        }\r\n\r\n        if (error == 'A network error (such as timeout, interrupted connection or unreachable host) has occurred.') {\r\n            setAlert('Network error.', 'danger');\r\n            clearErrors();\r\n        }\r\n        else if (error == 'The email address is already in use by another account.') {\r\n            setAlert('The email address is already in use.', 'danger');\r\n            clearErrors();\r\n        }\r\n        else if (error == 'Password should be at least 6 characters') {\r\n            setAlert('Password should be at least 6 characters.', 'danger');\r\n            clearErrors();\r\n        }\r\n        else if (error == 'The email address is badly formatted.') {\r\n            setAlert('Invalid email address.', 'danger');\r\n            clearErrors();\r\n        }\r\n\r\n        // eslint-disable-next-line\r\n    }, [error, isAuthenticated, props.history]);\r\n\r\n    const initialState = {\r\n        name: {\r\n            elementType: 'input',\r\n            elementConfig: {\r\n                type: 'text',\r\n                placeholder: 'Enter your Name',\r\n            },\r\n            value: '',\r\n            label: 'Name'\r\n        },\r\n        email: {\r\n            elementType: 'email',\r\n            elementConfig: {\r\n                type: 'email',\r\n                placeholder: 'Enter your Email Address',\r\n            },\r\n            value: '',\r\n            label: 'Email Address'\r\n        },\r\n        password: {\r\n            elementType: 'password',\r\n            elementConfig: {\r\n                type: 'password',\r\n                placeholder: 'Enter your Password',\r\n            },\r\n            value: '',\r\n            label: 'Password'\r\n        },\r\n        password2: {\r\n            elementType: 'password',\r\n            elementConfig: {\r\n                type: 'password',\r\n                placeholder: 'Re-enter your Password',\r\n            },\r\n            value: '',\r\n            label: 'Conform Password'\r\n        }\r\n    };\r\n\r\n    const [user, setUser] = useState(initialState);\r\n\r\n    const onChange = (e, keyName) => {\r\n        const updatedInput = { ...user };\r\n        const updatedField = { ...updatedInput[keyName] };\r\n        updatedField.value = e.target.value;\r\n        updatedInput[keyName] = updatedField;\r\n\r\n        setUser({ ...user, [keyName]: updatedInput[keyName] });\r\n\r\n    };\r\n\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        if (user.name.value === '' || user.email.value === '' || user.password.value === '') {\r\n            setAlert('Enter all fields', 'danger');\r\n            clearErrors();\r\n        }\r\n        else if (user.password.value !== user.password2.value) {\r\n            setAlert('Password does not match', 'danger');\r\n            clearErrors();\r\n        }\r\n        else {\r\n            // console.log(`Registration Submit`);\r\n            const data = {\r\n                name: user.name.value,\r\n                email: user.email.value,\r\n                password: user.password.value\r\n            };\r\n            // console.log(data.email);\r\n            // console.log(data.password);\r\n            register(data);\r\n        }\r\n    };\r\n\r\n    const inputArray = [];\r\n    for (let key in user) {\r\n        // console.log(user[key])\r\n        inputArray.push({\r\n            id: key,\r\n            config: user[key]\r\n        });\r\n    }\r\n    // console.log(inputArray);\r\n\r\n    return (\r\n        <form className='RegisterForm'>\r\n            <h2>Account <span className='RegisterSpan'>Register</span></h2>\r\n            {inputArray.map(details => (\r\n                <Input\r\n                    key={details.id}\r\n                    name={details.config.elementType}\r\n                    elementType={details.config.elementType}\r\n                    elementConfig={details.config.elementConfig}\r\n                    changed={(e) => onChange(e, details.id)}\r\n                    value={details.config.value}\r\n                    label={details.config.label}\r\n                />\r\n            ))}\r\n            <Button btnType='Large Primary' clicked={onSubmit}>Register</Button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default Registration;\r\n","import React, { useState, useContext, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Input from '../../UI/InputElement/InputElement';\r\nimport Button from '../../UI/Button/Button';\r\nimport AlertContext from '../../../Context/Alert/alertContext';\r\nimport AuthContext from '../../../Context/Auth/authContext';\r\nimport './Login.css';\r\n\r\nconst Login = (props) => {\r\n    const alertContext = useContext(AlertContext);\r\n    const authContext = useContext(AuthContext);\r\n\r\n    const { setAlert } = alertContext;\r\n    const { login, error, clearErrors, isAuthenticated } = authContext;\r\n\r\n    useEffect(() => {\r\n        if (isAuthenticated) {\r\n            props.history.push('/Contact-Manager/');\r\n        }\r\n\r\n        if (error === 'There is no user record corresponding to this identifier. The user may have been deleted.') {\r\n            setAlert('Email does not exist.', 'danger');\r\n            clearErrors();\r\n        }\r\n        else if (error === 'The password is invalid or the user does not have a password.') {\r\n            setAlert('Invalid password entered.', 'danger');\r\n            clearErrors();\r\n        }\r\n        else if (error === 'The email address is badly formatted.') {\r\n            setAlert('Invalid email address entered.', 'danger');\r\n            clearErrors();\r\n        }\r\n        else if (error === 'A network error (such as timeout, interrupted connection or unreachable host) has occurred.') {\r\n            setAlert('Network error.', 'danger');\r\n            clearErrors();\r\n        }\r\n\r\n        // eslint-disable-next-line\r\n    }, [error, isAuthenticated, props.history]);\r\n\r\n    const initialState = {\r\n        email: {\r\n            elementType: 'email',\r\n            elementConfig: {\r\n                type: 'email',\r\n                placeholder: 'Enter your Email Address',\r\n            },\r\n            value: '',\r\n            label: 'Email Address'\r\n        },\r\n        password: {\r\n            elementType: 'password',\r\n            elementConfig: {\r\n                type: 'password',\r\n                placeholder: 'Enter your Password',\r\n            },\r\n            value: '',\r\n            label: 'Password'\r\n        }\r\n    };\r\n\r\n    const [user, setUser] = useState(initialState);\r\n\r\n    const onChange = (e, keyName) => {\r\n        const updatedInput = { ...user };\r\n        const updatedField = { ...updatedInput[keyName] };\r\n        updatedField.value = e.target.value;\r\n        updatedInput[keyName] = updatedField;\r\n\r\n        setUser({ ...user, [keyName]: updatedInput[keyName] });\r\n    };\r\n\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        if (user.email.value === '' || user.password.value === '') {\r\n            setAlert('Enter all fields', 'danger');\r\n        }\r\n        else {\r\n            // console.log(`Registration Submit`);\r\n            const data = {\r\n                email: user.email.value,\r\n                password: user.password.value\r\n            };\r\n            // console.log(data.email);\r\n            // console.log(data.password);\r\n            login(data);\r\n        }\r\n    };\r\n\r\n    const inputArray = [];\r\n    for (let key in user) {\r\n        // console.log(user[key])\r\n        inputArray.push({\r\n            id: key,\r\n            config: user[key]\r\n        });\r\n    }\r\n    // console.log(inputArray);\r\n\r\n    return (\r\n        <div className='LoginFormContainer'>\r\n            <form className='LoginForm'>\r\n                <h2>Account <span className='LoginSpan'>Login</span></h2>\r\n                {inputArray.map(details => (\r\n                    <Input\r\n                        key={details.id}\r\n                        name={details.config.elementType}\r\n                        elementType={details.config.elementType}\r\n                        elementConfig={details.config.elementConfig}\r\n                        changed={(e) => onChange(e, details.id)}\r\n                        value={details.config.value}\r\n                        label={details.config.label}\r\n                    />\r\n                ))}\r\n                <Button btnType='Large Primary' clicked={onSubmit}>Login</Button>\r\n            </form>\r\n            <div className='SignUpContainer'>\r\n                <Link className='SignUp' to='/Contact-Manager/register' >Sign up</Link>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","import React from 'react';\r\nimport './Backdrop.css';\r\n\r\nconst Backdrop = (props) => ( props.show ? <div className='Backdrop'></div> : null )\r\n\r\nexport default Backdrop;","import React, { Fragment } from 'react';\r\nimport Backdrop from '../Backdrop/Backdrop';\r\nimport './Modal.css';\r\n\r\nconst Modal = (props) => {\r\n    // shouldComponentUpdate(nextProps, nextState) {\r\n    //     return nextProps.state !== this.props.state || nextProps.children !== this.props.children;\r\n    // }\r\n//  console.log(props.alertClass)\r\n    return (\r\n        <Fragment>\r\n            <Backdrop show={props.state} />\r\n            <div className={`Modal ${props.alertClass}`}>\r\n                {props.children}\r\n            </div>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default Modal;","import React, { useContext } from 'react';\r\nimport AlertContext from '../../../Context/Alert/alertContext';\r\nimport Modal from '../../UI/Modal/Modal';\r\n\r\nconst Alerts = () => {\r\n    const alertContext = useContext(AlertContext);\r\n    const { alerts } = alertContext;\r\n\r\n    return (\r\n        alerts.length > 0 && alerts.map(alert => (\r\n            <Modal\r\n                state={true}\r\n                key={alert.id}\r\n                alertClass={alert.type}\r\n            >\r\n                {alert.msg}\r\n            </Modal>\r\n            // <div\r\n            //     key={alert.id}\r\n            //     // className={}\r\n            // >\r\n            //     {alert.msg}\r\n            // </div>    \r\n        ))\r\n    );\r\n};\r\n\r\nexport default Alerts;\r\n","import {\r\n    ADD_CONTACT,\r\n    GET_CONTACTS,\r\n    DELETE_CONTACT,\r\n    UPDATE_CONTACT,\r\n    FILTER_CONTACTS,\r\n    SET_CURRENT,\r\n    CLEAR_CURRENT,\r\n    CLEAR_FILTER,\r\n    CONTACT_ERROR,\r\n    CLEAR_CONTACTS\r\n} from '../Types';\r\n\r\n\r\nexport default (state, action) => {\r\n    switch (action.type) {\r\n        case GET_CONTACTS:\r\n            // console.log('get contact', action.payload)\r\n            return {\r\n                ...state,\r\n                // contacts: [...state.contacts, action.payload]\r\n                contacts: action.payload,\r\n                loading:false\r\n            };\r\n        case ADD_CONTACT:\r\n            // console.log('add contact reducer ->', action.payload.type);\r\n            return {\r\n                ...state,\r\n                contacts: [action.payload, ...state.contacts]\r\n            };\r\n        case UPDATE_CONTACT:\r\n            return {\r\n                ...state,\r\n                contacts: state.contacts.map(contact => contact.id === action.payload.id ? action.payload : contact)\r\n            };\r\n        case DELETE_CONTACT:\r\n            return {\r\n                ...state,\r\n                contacts: state.contacts.filter(contact => contact.id !== action.payload)\r\n            };\r\n        case CLEAR_CONTACTS:\r\n            return {\r\n                ...state,\r\n                contacts: [],\r\n                current: null,\r\n                filtered: null,\r\n                error: null,\r\n                loading: true\r\n            }\r\n        case SET_CURRENT:\r\n            return {\r\n                ...state,\r\n                current: action.payload\r\n            };\r\n        case CLEAR_CURRENT:\r\n            return {\r\n                ...state,\r\n                current: null\r\n            };\r\n        case FILTER_CONTACTS:\r\n            // console.log(`${action.payload} > filterContacts reducer`)\r\n            return {\r\n                ...state,\r\n                filtered: state.contacts.filter(contact => {\r\n                    const regex = new RegExp(`${action.payload}`, 'gi');\r\n                    // console.log(`${regex} > regex`)\r\n                    // console.log(`${contact.name.match(regex) || contact.email.match(regex)} > comparision`)\r\n                    return contact.name.match(regex) || contact.email.match(regex);\r\n                })\r\n            };\r\n        case CLEAR_FILTER:\r\n            return {\r\n                ...state,\r\n                filtered: null\r\n            };\r\n        case CONTACT_ERROR:\r\n            return {\r\n                ...state,\r\n                error: action.payload\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","export const GET_CONTACTS = 'GET_CONTACTS';\r\nexport const ADD_CONTACT = 'ADD_CONTACT';\r\nexport const DELETE_CONTACT = 'DELETE_CONTACT';\r\nexport const UPDATE_CONTACT = 'UPDATE_CONTACT';\r\nexport const CLEAR_CONTACTS = 'CLEAR_CONTACTS';\r\nexport const FILTER_CONTACTS = 'FILTER_CONTACTS';\r\nexport const SET_CURRENT = 'SET_CURRENT';\r\nexport const CLEAR_CURRENT = 'CLEAR_CURRENT';\r\nexport const CLEAR_FILTER = 'CLEAR_FILTER';\r\nexport const SET_ALERT = 'SET_ALERT';\r\nexport const REMOVE_ALERT = 'REMOVE_ALERT';\r\nexport const REGISTER_SUCCESS = 'REGISTER_SUCCESS';\r\nexport const REGISTER_FAIL = 'REGISTER_FAIL';\r\nexport const USER_LOADED = 'USER_LOADED';\r\nexport const AUTH_ERROR = 'AUTH_ERROR';\r\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\nexport const LOGIN_FAIL = 'LOGIN_FAIL';\r\nexport const LOGINOUT = 'LOGINOUT';\r\nexport const CLEAR_ERRORS = 'CLEAR_ERRORS';\r\nexport const CONTACT_ERROR = 'CONTACT_ERROR';\r\n","import firebase from 'firebase';\r\n\r\nvar Config = {\r\n    apiKey: \"AIzaSyDW8atDnZctKEuoR_0VgWCYex-sCLBVqD4\",\r\n    authDomain: \"webmobilehybridapp.firebaseapp.com\",\r\n    databaseURL: \"https://webmobilehybridapp.firebaseio.com\",\r\n    projectId: \"webmobilehybridapp\",\r\n    storageBucket: \"webmobilehybridapp.appspot.com\",\r\n    messagingSenderId: \"1065788689805\",\r\n    appId: \"1:1065788689805:web:85133a7e0e0465dbb801c4\",\r\n    measurementId: \"G-7L9LNYJPH3\"\r\n};\r\n  \r\nconst DB = firebase.initializeApp(Config);\r\n\r\nexport default DB;","import React, { useReducer, useContext } from 'react';\r\nimport ContactContext from './contactContext';\r\nimport ContactReducer from './contactReducer';\r\nimport AuthContext from '../Auth/authContext';\r\nimport Axios from 'axios';\r\nimport DB from '../../Config/DB';\r\nimport {\r\n    ADD_CONTACT,\r\n    GET_CONTACTS,\r\n    DELETE_CONTACT,\r\n    UPDATE_CONTACT,\r\n    FILTER_CONTACTS,\r\n    CLEAR_CONTACTS,\r\n    SET_CURRENT,\r\n    CLEAR_CURRENT,\r\n    CLEAR_FILTER,\r\n    CONTACT_ERROR\r\n} from '../Types';\r\n\r\n\r\nconst ContactState = props => {\r\n    const initialState = {\r\n        contacts: [\r\n            // {\r\n            //     id: '01',\r\n            //     name: 'Shahid',\r\n            //     email: 'shahid@gmail.com',\r\n            //     phone: '1111-22-3333',\r\n            //     type: 'personal'\r\n            // }\r\n        ],\r\n        loading: true,\r\n        current: null,\r\n        filtered: null,\r\n        error: null\r\n    };\r\n\r\n    const authContext = useContext(AuthContext);\r\n    const { userID } = authContext;\r\n\r\n    const [state, dispatch] = useReducer(ContactReducer, initialState);\r\n\r\n    const getContacts = () => {\r\n        Axios.get(`https://webmobilehybridapp.firebaseio.com/contact-manager/contacts/${userID}.json`)\r\n            .then(res => {\r\n                // const key = Object.keys(res.data)\r\n                // console.log(key)\r\n                const contactArr = [];\r\n                // console.log(res.data);\r\n                // let obj = {};\r\n                // obj {\r\n                //     res.data,\r\n\r\n                // }\r\n                for (let key in res.data) {\r\n                    // console.log(key);\r\n                    // res.data['id'] = key \r\n                    // console.log(res.data[key]);                 \r\n                    // obj = res.data[key];         // set the individual obj of contact into the variable\r\n                    // obj['id'] = key;             // set firebase generatrd key as the id of an obj\r\n                    // console.log(obj);\r\n\r\n                    contactArr.push(res.data[key]);\r\n                }\r\n                // console.log(contactArr);\r\n                dispatch({ type: GET_CONTACTS, payload: contactArr });\r\n                // for (let index of contactArr) {\r\n                // console.log(index)\r\n                // }\r\n            })\r\n            .catch(err => {\r\n                console.log(err.mesage);\r\n            });\r\n    };\r\n\r\n    const addContact = contact => {\r\n        const id = Math.floor(Math.random() * 10000);\r\n        contact.id = id;\r\n        contact.userID = userID;\r\n\r\n        Axios.post(`https://webmobilehybridapp.firebaseio.com/contact-manager/contacts/${userID}.json`, contact)\r\n            .then(res => {\r\n                Axios.get(`https://webmobilehybridapp.firebaseio.com/contact-manager/contacts/${userID}.json`)\r\n                    .then(res => {\r\n                        const contactArr = [];\r\n                        let objGetContact = {};\r\n                        for (let key in res.data) {\r\n                            objGetContact = res.data[key];         // set the individual obj of contact into the variable\r\n                            objGetContact['id'] = key;             // set firebase generatrd key as the id of an obj\r\n                            contactArr.push(objGetContact);\r\n                        }\r\n                        // console.log(contactArr)\r\n                        let index = null;\r\n                        contactArr.length === 0 ? index = 0 : index = contactArr.length - 1\r\n                        // console.log(index)\r\n                        Axios.put(`https://webmobilehybridapp.firebaseio.com/contact-manager/contacts/${userID}/${contactArr[index].id}.json`, contactArr[index]);\r\n                    })\r\n                let objPostContact = {};\r\n                objPostContact = JSON.parse(res.config.data);\r\n                dispatch({ type: ADD_CONTACT, payload: objPostContact });\r\n            })\r\n            .catch(err => {\r\n                dispatch({ type: CONTACT_ERROR, payload: err });\r\n            });\r\n    };\r\n\r\n    const updateContact = contact => {\r\n        // DB.database().ref(`https://webmobilehybridapp.firebaseio.com/contact-manager/contacts/${userID}/${contact.id}`).update({contact})\r\n        Axios.put(`https://webmobilehybridapp.firebaseio.com/contact-manager/contacts/${userID}/${contact.id}.json`, contact)\r\n            .then(res => {\r\n                dispatch({ type: UPDATE_CONTACT, payload: contact });\r\n            })\r\n            .catch(err => {\r\n                dispatch({ type: CONTACT_ERROR, payload: err });\r\n            });\r\n    };\r\n\r\n    const deleteContact = id => {\r\n        Axios.delete(`https://webmobilehybridapp.firebaseio.com/contact-manager/contacts/${userID}/${id}.json`)\r\n            .then(res => {\r\n                dispatch({ type: DELETE_CONTACT, payload: id });\r\n            })\r\n            .catch(err => {\r\n                dispatch({ type: CONTACT_ERROR, payload: err });\r\n            });\r\n    };\r\n\r\n    const clearContacts = () => {\r\n        dispatch({ type: CLEAR_CONTACTS });\r\n    };\r\n\r\n    const setCurrent = contact => {\r\n        dispatch({ type: SET_CURRENT, payload: contact });\r\n    };\r\n\r\n    const clearCurrent = () => {\r\n        dispatch({ type: CLEAR_CURRENT });\r\n    };\r\n\r\n    const filterContacts = text => {\r\n        dispatch({ type: FILTER_CONTACTS, payload: text });\r\n    };\r\n\r\n    const clearFilter = () => {\r\n        dispatch({ type: CLEAR_FILTER });\r\n    };\r\n\r\n    return (\r\n        <ContactContext.Provider\r\n            value={{\r\n                contacts: state.contacts,\r\n                loading: state.loading,\r\n                current: state.current,\r\n                filtered: state.filtered,\r\n                error: state.error,\r\n                addContact,\r\n                updateContact,\r\n                deleteContact,\r\n                setCurrent,\r\n                clearCurrent,\r\n                filterContacts,\r\n                clearFilter,\r\n                getContacts,\r\n                clearContacts\r\n            }}\r\n        >\r\n            {props.children}\r\n        </ContactContext.Provider>\r\n    );\r\n};\r\n\r\nexport default ContactState;\r\n","import {\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FAIL,\r\n    USER_LOADED,\r\n    AUTH_ERROR,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOGINOUT,\r\n    CLEAR_ERRORS\r\n} from '../Types';\r\n\r\nexport default (state, action) => {\r\n    switch (action.type) {\r\n        case USER_LOADED:\r\n            return {\r\n                ...state,\r\n                isAuthenticated: true,\r\n                loading: false,\r\n                user: action.payload\r\n            };\r\n        case REGISTER_SUCCESS:\r\n        case LOGIN_SUCCESS:\r\n            // console.log(action.payload)\r\n            // localStorage.removeItem('userID');\r\n            localStorage.setItem('userID', action.payload);\r\n            // localStorage.setItem('isAuthenticated', true);\r\n            return {\r\n                ...state,\r\n                userID: action.payload,\r\n                isAuthenticated: true,\r\n                loading: false\r\n            };\r\n        case REGISTER_FAIL:\r\n        case AUTH_ERROR:\r\n        case LOGIN_FAIL:\r\n        case LOGINOUT:\r\n            localStorage.removeItem('userID');\r\n            // localStorage.setItem('isAuthenticated', false);\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n                isAuthenticated: false,\r\n                loading: false,\r\n                user: null,\r\n                error: action.payload\r\n            };\r\n        case CLEAR_ERRORS:\r\n            return {\r\n                ...state,\r\n                error: null\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};","import React, { useReducer, useEffect } from 'react';\r\nimport AuthContext from './authContext';\r\nimport AuthReducer from './authReducer';\r\nimport {\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FAIL,\r\n    USER_LOADED,\r\n    AUTH_ERROR,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOGINOUT,\r\n    CLEAR_ERRORS\r\n} from '../Types';\r\nimport DB from '../../Config/DB';\r\nimport Axios from 'axios';\r\n\r\n\r\nconst AuthState = props => {\r\n   \r\n    const initialState = {\r\n        userID: localStorage.getItem('userID'), // token is the uid of firebase\r\n        // isAuthenticated: localStorage.getItem('isAuthenticated'),\r\n        isAuthenticated: false,\r\n        loading: true,\r\n        user: null,\r\n        error: null\r\n    };\r\n\r\n    const [state, dispatch] = useReducer(AuthReducer, initialState);\r\n\r\n    // useEffect(() => {\r\n    //     // console.log(`authState`)\r\n    //     // console.log(`------------------------`)\r\n    //     // loadUser(localStorage.getItem('userID'))\r\n    //     localStorage.removeItem('userID');\r\n    //     // localStorage.setItem('isAuthenticated', false)\r\n    // }, []);\r\n \r\n    const loadUser = (ID) => {\r\n        Axios.get('https://webmobilehybridapp.firebaseio.com/contact-manager/registered-users-data.json')\r\n            .then(res => {\r\n                const users = [];\r\n                for (let key in res.data) {\r\n                    users.push(res.data[key]);\r\n                }\r\n                for (let key of users) {\r\n                    if (key.id === ID) {\r\n                        // console.log(key)\r\n                        dispatch({ type: USER_LOADED, payload: key });\r\n                        // set functionality of user loaded in its reducer.\r\n                    }\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n                dispatch({ type: AUTH_ERROR, payload: err.message });\r\n            });\r\n    };\r\n\r\n    const register = FormData => {\r\n        DB.auth().createUserWithEmailAndPassword(FormData.email, FormData.password)\r\n            .then(res => {\r\n                Axios.post('https://webmobilehybridapp.firebaseio.com/contact-manager/registered-users-data.json',\r\n                    {\r\n                        id: res.user.uid,\r\n                        name: FormData.name,\r\n                        email: FormData.email\r\n                    });\r\n                // console.log(res)\r\n                dispatch({ type: REGISTER_SUCCESS, payload: res.user.uid });\r\n                // loadUser(res.user.uid);\r\n                setTimeout(() => loadUser(res.user.uid), 2000);\r\n            })  // return firebase user id (res.user.uid)\r\n            .catch(err => {\r\n                dispatch({ type: REGISTER_FAIL, payload: err.message });\r\n            }); // return error message (err.message)\r\n    };\r\n\r\n    const login = FormData => {\r\n        DB.auth().signInWithEmailAndPassword(FormData.email, FormData.password)\r\n            .then(res => {\r\n                // console.log(res)\r\n                dispatch({ type: LOGIN_SUCCESS, payload: res.user.uid });\r\n                loadUser(res.user.uid);\r\n            })  // return firebase user id (res.user.uid)\r\n            .catch(err => {\r\n                console.log(err.message);\r\n                dispatch({ type: LOGIN_FAIL, payload: err.message });\r\n            }); // return error message (err.message)\r\n    };\r\n\r\n    const logout = () => dispatch({ type: LOGINOUT });\r\n\r\n    const clearErrors = () => dispatch({ type: CLEAR_ERRORS });\r\n\r\n    // console.log(state.error)\r\n\r\n\r\n    return (\r\n        <AuthContext.Provider\r\n            value={{\r\n                userID: state.userID,\r\n                isAuthenticated: state.isAuthenticated,\r\n                loading: state.loading,\r\n                user: state.user,\r\n                error: state.error,\r\n                register,\r\n                loadUser,\r\n                login,\r\n                logout,\r\n                clearErrors\r\n            }}\r\n        >\r\n            {props.children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\nexport default AuthState;\r\n","import {\r\n    SET_ALERT,\r\n    REMOVE_ALERT\r\n} from '../Types';\r\n\r\n\r\nexport default (state, action) => {\r\n    switch (action.type) {\r\n        case SET_ALERT:\r\n            return [...state, action.payload];\r\n        case REMOVE_ALERT:\r\n            return state.filter(alert => alert.id !== action.payload);\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import React, { useReducer } from 'react';\r\nimport AlertContext from './alertContext';\r\nimport AlertReducer from './alertReducer';\r\nimport {\r\n    SET_ALERT,\r\n    REMOVE_ALERT\r\n} from '../Types';\r\n\r\n\r\nconst AlertState = props => {\r\n    const initialState = [];\r\n\r\n    const [state, dispatch] = useReducer(AlertReducer, initialState);\r\n\r\n    const setAlert = (msg, type, timeout = 5000) => {\r\n        const id = Math.floor(Math.random() * 10000);\r\n        state.id = id;\r\n        dispatch({ type: SET_ALERT, payload: { id, msg, type } });\r\n\r\n        setTimeout(() => {\r\n            dispatch({ type: REMOVE_ALERT, payload: id });\r\n        }, timeout);\r\n    };\r\n\r\n    return (\r\n        <AlertContext.Provider\r\n            value={{\r\n                alerts: state, \r\n                setAlert\r\n            }}\r\n        >\r\n            {props.children}\r\n        </AlertContext.Provider>\r\n    );\r\n};\r\n\r\nexport default AlertState;\r\n","import React, { useContext } from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport AuthContext from '../../Context/Auth/authContext';\r\n\r\nconst PrivateRoute = ({ component: Component, ...rest }) => {\r\n    const authContext = useContext(AuthContext);\r\n    const { isAuthenticated, loading, userID } = authContext;\r\n\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            // logout                           not login\r\n            render={props =>\r\n                (!isAuthenticated && !loading) ?\r\n                    (\r\n                        <Redirect from='/Contact-Manager/' to='/Contact-Manager/login' />\r\n                    ) :\r\n                    (\r\n                        (userID !== null) ?\r\n                            (\r\n                                <Component {...props} />\r\n                            ) :\r\n                            (\r\n                                <Redirect from='/Contact-Manager/' to='/Contact-Manager/login' />\r\n                            )\r\n                    )\r\n            }\r\n        />\r\n    );\r\n};\r\n\r\nexport default PrivateRoute;\r\n","import React, {useEffect} from 'react';\r\nimport { Route, Switch, useLocation } from 'react-router-dom';\r\nimport Navbar from './Components/Layout/Navbar';\r\nimport Home from './Components/Pages/Home/Home';\r\nimport About from './Components/Pages/About';\r\nimport Register from './Components/Pages/Register/Register';\r\nimport Login from './Components/Pages/Login/Login';\r\nimport Alert from './Components/Layout/Alert/Alerts';\r\nimport ContactState from './Context/Contact/ContactState';\r\nimport AuthState from './Context/Auth/AuthState';\r\nimport AlertState from './Context/Alert/AlertState';\r\nimport PrivateRoute from './Components/Routeing/PrivateRoute';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const currentURL = useLocation();\r\n  console.log(currentURL.pathname);\r\n  return (\r\n    <AuthState>\r\n      <ContactState>\r\n        <AlertState>\r\n          <Navbar />\r\n          <Alert />\r\n          <div className='App'>\r\n            <Switch>\r\n              <Route path='/Contact-Manager/login' active component={Login} />\r\n              <PrivateRoute path='/Contact-Manager/' exact component={Home} />\r\n              <Route path='/Contact-Manager/about' component={About} />\r\n              <Route path='/Contact-Manager/register' component={Register} />\r\n            </Switch>\r\n          </div>\r\n        </AlertState>\r\n      </ContactState>\r\n    </AuthState>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\n\r\nconst myApp = (\r\n  <Router>\r\n    <App />\r\n  </Router>\r\n);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    {myApp}\r\n  </React.StrictMode >\r\n  ,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}